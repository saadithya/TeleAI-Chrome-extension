// Background script for AI Teleprompter Chrome Extension

// Listen for messages from popup
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    console.log('Background script received message:', request);
    
    if (request.action === 'startGeneration') {
        // Start AI content generation
        generateContentWithAI(request.data)
            .then(result => {
                console.log('AI generation completed successfully:', result);
                // Send result back to popup if it's still open
                if (sender.tab) {
                    chrome.tabs.sendMessage(sender.tab.id, {
                        action: 'generationComplete',
                        result: result
                    }).catch(err => {
                        console.log('Could not send message to popup (likely closed):', err);
                    });
                }
                // Also save to storage for when popup is reopened
                chrome.storage.local.set({ 
                    generatedContent: result.content,
                    isGenerating: false,
                    generationStatus: 'Content generated successfully!'
                });
            })
            .catch(error => {
                console.error('AI generation failed:', error);
                // Send error back to popup if it's still open
                if (sender.tab) {
                    chrome.tabs.sendMessage(sender.tab.id, {
                        action: 'generationError',
                        error: error.message
                    }).catch(err => {
                        console.log('Could not send message to popup (likely closed):', err);
                    });
                }
                // Also save error state to storage
                chrome.storage.local.set({ 
                    isGenerating: false,
                    generationStatus: `Error: ${error.message}`
                });
            });
        
        // Return true to indicate we'll send a response asynchronously
        return true;
    } else if (request.action === 'cancelGeneration') {
        // Handle cancellation
        console.log('Generation cancelled by user');
        chrome.storage.local.set({ 
            isGenerating: false,
            generationStatus: 'Generation cancelled by user.'
        });
        // Send cancellation confirmation back to popup if it's still open
        if (sender.tab) {
            chrome.tabs.sendMessage(sender.tab.id, {
                action: 'generationCancelled'
            }).catch(err => {
                console.log('Could not send message to popup (likely closed):', err);
            });
        }
        return true;
    }
});

/**
 * Generate content using Chrome's built-in AI
 */
async function generateContentWithAI(data) {
    const { prompt, words } = data;
    
    console.log('Starting AI generation in background with prompt:', prompt);
    console.log('Word count:', words);
    
    try {
        // Debug information
        console.log('Checking for AI availability in background...');
        console.log('window object:', typeof window !== 'undefined' ? window : 'Not available in background');
        console.log('LanguageModel:', typeof LanguageModel);
        
        // Since we're in background script, we need to use a different approach
        // For now, we'll just simulate the process and recommend using the popup
        // In a real implementation, we would need to use offscreen documents or similar
        
        // Save generation state
        chrome.storage.local.set({ 
            isGenerating: true,
            generationStatus: 'Generating content with built-in AI...'
        });
        
        // Simulate processing time
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // Generate sample content
        const content = `This is sample content generated for your prompt: "${prompt}". In a full implementation, this would be generated by Chrome's built-in AI. The requested word count was ${words}.`;
        
        console.log('Background generation completed with content:', content);
        
        return { content };
    } catch (error) {
        console.error('Background generation error:', error);
        throw error;
    }
}

// Log when background script starts
console.log('AI Teleprompter background script loaded');